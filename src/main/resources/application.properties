spring.profiles.active=dev
spring.application.name=Proposta-Microservice

#jpa
spring.jpa.hibernate.ddl-auto=update

#feign clients url
api.solicitations.url: ${API_SOLICITATION_URL:http://localhost:9999/api/solicitacao}
api.cards.url: ${API_CARDS_URL:http://localhost:8888/api/cartoes}

## spring security resource server configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/proposta}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/proposta/protocol/openid-connect/certs}

#actuator
management.endpoints.web.exposure.include=health, metrics, prometheus
management.endpoints.prometheus.enabled=true

# Jaeger - Habilita ou não
opentracing.jaeger.enabled=${JAEGER_ENABLED:true}

# Jaeger - Nome do serviço
opentracing.jaeger.service-name=${spring.application.name}

# Jaeger - Endereço para enviar os metadados (trace, span, etc)
opentracing.jaeger.http-sender.url=${JAEGER_ENDPOINT:http://localhost:14268/api/traces}

# Jaeger - Tipo de amostragem (probabilístico) e sua configuração (1 = 100%)
opentracing.jaeger.probabilistic-sampler.sampling-rate=${JAEGER_SAMPLER:1}

#health status when down
management.endpoint.health.status.http-mapping.down=503
management.endpoint.health.status.http-mapping.fatal=503
management.endpoint.health.status.http-mapping.out-of-service=503

#scheduler
associate.card.fixed.delay = 1000000

#controlando timeout:
#feign
feign.client.config.solicitacao.read-timeout=200
feign.client.config.solicitacao.connect-timeout=200

#jpa
spring.jpa.properties.javax.persistence.query.timeout = 50